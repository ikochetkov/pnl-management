<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ws_operation">
    <sys_ws_operation action="INSERT_OR_UPDATE">
        <active>true</active>
        <consumes>application/json,application/xml,text/xml</consumes>
        <consumes_customized>false</consumes_customized>
        <default_operation_uri/>
        <enforce_acl>cf9d01d3e73003009d6247e603f6a990</enforce_acl>
        <http_method>GET</http_method>
        <name>GetPNLUserDataSet</name>
        <operation_script><![CDATA[(function process( /*RESTAPIRequest*/ request, /*RESTAPIResponse*/ response) {

	var utils = new Utils();

	var preBody, prePeriods, filtered;
	var deadlinePeriods = ['early_access', 'question', 'reassign', 'answer'];
	var periodInfo = {};
	var queryParams = '';

	//get previous month deadline data -START
	var deadlineData = utils.getCurrentPeriodDeadline('answer');
	var beforeDeadline = deadlineData.beforeDeadline;
	var curYear = deadlineData.curYear;
	var curMonth = deadlineData.curMonth;
	var deadlineSysID = deadlineData.sysID;
	//get previous month deadline data -END

	var curUser = gs.getUserName();
	var userSysID = gs.getUserID();

	// check if user has temporary access -START
	var tempAcc = new GlideRecord('x_aaro2_pnl_mgmt_temporary_access_participants');
	tempAcc.addQuery('user', userSysID);
	gs.info('pnl utils userSysID' + userSysID);
	tempAcc.query();
	if(tempAcc.next()) {
		queryParams = '&TempReader=true'; 
		if(tempAcc.getValue('can_interact') == 1) {
			queryParams = '&TempWriter=true';
		}
	}
	// check if user has temporary access -END

	deadlinePeriods.forEach(function(period){
		var periodData = utils.getCurrentPeriodDeadline(period);
		periodInfo[period] = {
			currentPeriod : periodData.beforeDeadline,
			start : periodData.start,
			end : periodData.end
		};
	});
	gs.info('deadlinePeriods: '+JSON.stringify(periodInfo));
	//check if user has Early access -START
	var hasEarlyAcc = utils.userHasEarlyAcc(userSysID, deadlineSysID);
	var earlyAccTime =  utils.timeValid(periodInfo.early_access.start, deadlineData.end);
	//check if user has Early access -END

	//check if user has statements verification access -START
	//var	hasVerifAcc = utils.userHasVerifAcc(userSysID, deadlineSysID);
	//check if user has statements verification access -END

	var responseObj, restResponse, endpoint;
	gs.info('PNL MANAGEMENT: ' + JSON.stringify(request.queryParams));

	try {
		endpoint = gs.getProperty('x_aaro2_pnl_mgmt.GetPNLUserDataSet_endpoint') + "UserLogin=" + 'cepritch';// //'nefiveas';
		if(queryParams) {
			endpoint += queryParams;
		}
		gs.info('pnl utils endpoint' + endpoint);
		var r = new sn_ws.RESTMessageV2();
		r.setHttpMethod('GET');
		r.setEndpoint(endpoint);
		r.setMIDServer(gs.getProperty('mid.server.rba_default'));
		r.setRequestHeader('Content-Type', 'application/json');
		r.setRequestHeader('Accept', 'application/json');
		r.setHttpTimeout(5000);
		restResponse = r.execute();
		restResponse.waitForResponse(15);
		responseObj = new global.RESTResponseUtils(restResponse);
	} catch (ex) {
		responseObj = new global.RESTResponseUtils(restResponse);
		responseObj.setBody(ex.toString());
		responseObj.setErrorMessage("There was an error calling the webservice.");
		responseObj.setStatusCode(503);
		responseObj.setHaveError(true);
		gs.error(responseObj);
	}
	//test data -START

	var body = JSON.parse(responseObj.body);
	var periods = body.Periods;
	periods.push({
		"FiscalYear": 2021,
		"AccountingPeriod": 2
	});

	body.Periods = periods;
	responseObj.body = JSON.stringify(body);

	//test data -END

	// cutting previous month data -sTART

	gs.info('pnl utils acc periodInfo.early_access.currentPeriod 1 - ' + periodInfo.early_access.currentPeriod);
	//gs.info('pnl utils acc !hasVerifAcc  1 - ' + !hasVerifAcc);
	gs.info('pnl utils acc periodInfo.answer.currentPeriod  2 - ' + periodInfo.answer.currentPeriod);
	gs.info('pnl utils acc !hasEarlyAcc 2  - ' + !hasEarlyAcc);

	//if PALMS returned 200 (NOT 500)
	if(responseObj && responseObj.body){
		//if((periodInfo.early_access.currentPeriod && !hasVerifAcc) || (periodInfo.answer.currentPeriod && !hasEarlyAcc)) {
		var currentTimeLessThenEarlyAccessEnd = new GlideDateTime().getNumericValue() < new GlideDateTime(periodInfo.early_access.end).getNumericValue();
		gs.info('pnl utils userDebug: currentTimeLessThenEarlyAccessEnd - '+currentTimeLessThenEarlyAccessEnd+' ; userDontHavePnlAdminRole -  '+!gs.getUser().hasRole('x_aaro2_pnl_mgmt.admin')+' ; userDontHaveEarlyAccess - '+!hasEarlyAcc);
		if(currentTimeLessThenEarlyAccessEnd && !gs.getUser().hasRole('x_aaro2_pnl_mgmt.admin') &&!hasEarlyAcc ){
			preBody = JSON.parse(responseObj.body);
			prePeriods = preBody.Periods;
			filtered = prePeriods.filter(function(period){
				return !(period.FiscalYear == curYear && period.AccountingPeriod == curMonth);
			});
			preBody.Periods = filtered;
			responseObj.body = JSON.stringify(preBody);
		}
	} 
	// cutting previous month data -END

	return responseObj;

})(request, response);]]></operation_script>
        <operation_uri>/api/x_aaro2_pnl_mgmt/utils/GetPNLUserDataSet</operation_uri>
        <produces>application/json,application/xml,text/xml</produces>
        <produces_customized>false</produces_customized>
        <relative_path>/GetPNLUserDataSet</relative_path>
        <request_example/>
        <requires_acl_authorization>true</requires_acl_authorization>
        <requires_authentication>true</requires_authentication>
        <requires_snc_internal_role>true</requires_snc_internal_role>
        <short_description/>
        <sys_class_name>sys_ws_operation</sys_class_name>
        <sys_created_by>xxsbhuvan</sys_created_by>
        <sys_created_on>2020-12-15 15:39:01</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>ff7bcce6db4124905884eb184b96191e</sys_id>
        <sys_mod_count>223</sys_mod_count>
        <sys_name>GetPNLUserDataSet</sys_name>
        <sys_package display_value="PNL Management" source="x_aaro2_pnl_mgmt">58a846e1db14ec50389b84d868961919</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="PNL Management">58a846e1db14ec50389b84d868961919</sys_scope>
        <sys_update_name>sys_ws_operation_ff7bcce6db4124905884eb184b96191e</sys_update_name>
        <sys_updated_by>xxikochet</sys_updated_by>
        <sys_updated_on>2021-03-01 15:04:30</sys_updated_on>
        <web_service_definition display_value="utils">d3a7e6e5db5ce8505884eb184b961953</web_service_definition>
        <web_service_version/>
    </sys_ws_operation>
</record_update>
