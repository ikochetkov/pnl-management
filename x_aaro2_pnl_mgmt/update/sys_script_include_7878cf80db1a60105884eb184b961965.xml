<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_aaro2_pnl_mgmt.Utils</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>Utils</name>
        <script><![CDATA[var Utils = Class.create();
Utils.prototype = {
	initialize: function () {
		this.DEADLINE_TABLE = 'x_aaro2_pnl_mgmt_deadline';
		this.QUESTION_TABLE = 'x_aaro2_pnl_mgmt_question';
		this.ACCOUNT_ASSIGNMENT_TABLE = 'x_aaro2_pnl_mgmt_pnl_account_assignment';
		this.EARLY_ACC_GR_TABLE = 'x_aaro2_pnl_mgmt_early_access_group';
		this.ASSIGN_MANAGER_TABLE = 'x_aaro2_pnl_mgmt_assignment_manager';
		this.ATTACHMENT_TABLE = 'sys_attachment';
		this.NOTIFICATIONS_TABLE = 'sysevent_email_action';
	},

	getCurrentPeriodDeadline: function (periodType) {
		var gdt = new GlideDateTime();
		var data = {};
		data.currentDateTime = gdt.toString();
		gdt.addMonthsUTC(-1);
		var curYear = gdt.getYearUTC();
		var curMonth = gdt.getMonthUTC();
		data = this.getDeadline(curYear, String(curMonth), periodType);
		data.beforeDeadline = this.timeValid(data.start, data.end);
		data.curYear = curYear;
		data.curMonth = curMonth;

		return data;
	},

	// 	getCurrentPeriodDeadline: function(periodType) {
	// 		var gdt = new GlideDateTime();
	// 		var curYear = gdt.getYearUTC();
	// 		var curMonth = gdt.getMonthUTC();
	// 		--curMonth;
	// 		var data = this.getDeadline(curYear, String(curMonth), periodType);
	// 		data.currentDateTime = gdt.toString();
	// 		data.beforeDeadline = this.timeValid(gdt, data.end);
	// 		data.curYear = curYear;
	// 		data.curMonth = curMonth;

	// 		return data;
	// 	},

	getDeadline: function (year, month, periodType) {
		//var formatted_month = month.indexOf('0')==0? month.replace('0',''): month;
		var dlGR = new GlideRecord(this.DEADLINE_TABLE);
		dlGR.addQuery('year', year);
		dlGR.addQuery('month', month);
		dlGR.query();
		if (dlGR.next()) {
			var period = {};
			period.start = dlGR.getValue(periodType + '_start');
			period.end = dlGR.getValue(periodType + '_end');
			period.sysID = dlGR.getUniqueValue();

			return period;
		} else {
			return false;
		}

	},

	getQuestionModalData: function (sysID) {
		var questionGr = new GlideRecord(this.QUESTION_TABLE);
		questionGr.get(sysID);

		var acc = questionGr.getValue('account');
		var year = questionGr.getValue('year');
		var month = questionGr.getValue('period');
		var deadlineReassignmentPeriod = this.getDeadline(year, month, 'reassign');
		//gs.info('PNL_IGOR: year-'+year+' ; month - '+month);
		//gs.info('PNL_IGOR2: '+deadlineReassignmentPeriod);
		var reassignmentTimeValid = this.timeValid(deadlineReassignmentPeriod.start, deadlineReassignmentPeriod.end);

		var deadlineAnswerPeriod = this.getDeadline(year, month, 'answer');
		var answerTimeValid = this.timeValid(deadlineAnswerPeriod.start, deadlineAnswerPeriod.end);

		var users = [];
		var accountAssignmentGa = new GlideAggregate(this.ACCOUNT_ASSIGNMENT_TABLE);
		accountAssignmentGa.groupBy('user');
		accountAssignmentGa.query();
		while (accountAssignmentGa.next()) {
			users.push({
				id: accountAssignmentGa.getValue('user'),
				label: accountAssignmentGa.getDisplayValue('user')
			});
		}
		//update watched_by field 
		var watched_by = questionGr.getValue('watched_by');
		var userSys_id = gs.getUserID();

		if (watched_by == null) {
			questionGr.setValue('watched_by', userSys_id);
			questionGr.update();
		} else if (watched_by.indexOf(userSys_id) == -1) {
			watched_by += ',' + userSys_id;
			questionGr.setValue('watched_by', watched_by);
			questionGr.update();
		}
		//end

		return {
			reassignment_users: users,
			reassignment_start: deadlineReassignmentPeriod.start,
			reassignment_end: deadlineReassignmentPeriod.end,
			reassignment_time_valid: reassignmentTimeValid,
			answer_start: deadlineAnswerPeriod.start,
			answer_end: deadlineReassignmentPeriod.end,
			answer_time_valid: answerTimeValid,
			is_assignment_manager: this._isAssignmentManager(userSys_id),
			attachments: this._getAttachments(sysID)
		};
	},
	_getAttachments: function (sys_id) {
		var attachments = []
		var gsa = new GlideSysAttachment()
		var attachment = gsa.getAttachments(this.QUESTION_TABLE, sys_id)
		while (attachment.next()) {
			attachments.push(
				{
					file_name: attachment.getValue('file_name'),
					size_bytes: attachment.getValue('size_bytes'),
					content_type: attachment.getValue('content_type'),
					sys_id: attachment.getUniqueValue()
				}
			)
		}
		return attachments
	},
	getJournal: function (sys_id) {
		var je = new GlideRecord('sys_journal_field');
		je.addQuery('element_id', sys_id);
		je.orderByDesc('sys_created_on');
		je.query();
		var entries = [];
		while (je.next()) {
			var entry = {
				author: this._getUserObject(je.getValue('sys_created_by')),
				comment: je.getValue('value'),
				created_on: je.getValue('sys_created_on')
			};
			entries.push(entry);
		}
		return entries;
	},
	setJournal: function (sys_id, text) {
		gs.info('PNL SET JOURNAL::: ' + text)
		var gr = new GlideRecord(this.QUESTION_TABLE);
		gr.get(sys_id);
		gr.comments = text;
		gr.update();
		return 'success';
	},

	_getUserObject: function (userid) {
		var userGr = new GlideRecord('sys_user');
		userGr.get('user_name', userid);
		var userObj = {
			id: userid,
			name: userGr.getValue('name'),
			avatar: userGr.getValue('avatar') || '',
			email: userGr.getValue('email')
		};
		return userObj;
	},

	timeValid: function (start, end) {
		var startNumeric = new GlideDateTime(start).getNumericValue();
		var endNumeric = new GlideDateTime(end).getNumericValue(); 
		var currentTime = new GlideDateTime().getNumericValue();

		//gs.info('PALMS Utils start --- ' + start + ' --currentTime-- ' + new GlideDateTime() + ' --- endNumeric ---' + end);
		return startNumeric < currentTime && endNumeric > currentTime;
	},

	_getEarlyAccGroups: function (deadlineSysID) {
		var groups = [];
		var groupGr = new GlideRecord(this.EARLY_ACC_GR_TABLE);
		groupGr.addQuery('deadline', deadlineSysID);
		groupGr.query();
		while (groupGr.next()) {
			groups.push(groupGr.getValue('group'));
		}
		return groups;
	},

	_isAssignmentManager: function (userSys_id) {

		var isManager = false;

		var managerGr = new GlideRecord(this.ASSIGN_MANAGER_TABLE);
		managerGr.addQuery('user', userSys_id);
		managerGr.query();
		if (managerGr.next()) {
			isManager = true;
		}
		return isManager;
	},

	userHasEarlyAcc: function (userSysID, deadlineSysID) {
		var hasEarlyAcc = false;

		var groups = this._getEarlyAccGroups(deadlineSysID);

		var grMemberGr = new GlideRecord('sys_user_grmember');
		grMemberGr.addQuery('group', 'IN', groups);
		grMemberGr.addQuery('user', userSysID);
		grMemberGr.query();

		if (grMemberGr.next()) {
			hasEarlyAcc = true;
		}

		if (!hasEarlyAcc) {
			var preRelAcc = new GlideRecord('x_aaro2_pnl_mgmt_m2m_early_access_user');
			preRelAcc.addQuery('deadline', deadlineSysID);
			preRelAcc.addQuery('user', userSysID);
			preRelAcc.query();
			if (preRelAcc.hasNext()) {
				hasEarlyAcc = true;
			}
		}

		return hasEarlyAcc;
	},

	getDefaultEarlyAccessUsers: function (deadlineRecordSysId) {
		var defaultEarlyAccessUsers = [];
		var groups = this._getEarlyAccGroups(deadlineRecordSysId);
		var grMemberGr = new GlideRecord('sys_user_grmember');

		grMemberGr.addEncodedQuery('groupIN' + groups + '^user.active=true');
		grMemberGr.query();

		while (grMemberGr.next()) {
			defaultEarlyAccessUsers.push(grMemberGr.getValue('user'));
		}
		return defaultEarlyAccessUsers;
	},

	getReviewingUsers: function () {
		var reviewingUsers = [];
		var grMemberGr = new GlideRecord('sys_user_grmember');
		var groups = gs.getProperty("x_aaro2_pnl_mgmt.default_review_groups");

		grMemberGr.addEncodedQuery('group.nameIN' + groups + '^user.active=true');
		grMemberGr.query();

		while (grMemberGr.next()) {
			reviewingUsers.push(grMemberGr.getValue('user'));
		}

		return reviewingUsers;
	},

	getDayOfWeekName: function (number) {
		var days = { 1: "Monday", 2: "Tuesday", 3: "Wednesday", 4: "Thursday", 5: "Friday", 6: "Saturday", 7: "Sunday" };

		return days[number];
	},

	dateToLetterFormat: function (date) {
		var gdt = new GlideDateTime(date);

		var output = gdt.getMonthUTC() + '/' + gdt.getDayOfMonthUTC() + '/' + gdt.getYearUTC();

		return output;
	},

	getNotifications: function (deadlineSysId, month) {

		var lastMonths = [3,6,9,12];
		var isLastQmonth = !!~lastMonths.indexOf(parseInt(month));

		var dayName = {
			earlyAccess: 'Early Access Invitaiton',
			invitation: isLastQmonth? 'Access is available  - 3rd month of quarter' : 'Access is available  - first 2 months of quarter',
			completion: 'Question was answered'
		};
		var notifications = {};


		for(var key in dayName){
			var notifGr = new GlideRecord(this.NOTIFICATIONS_TABLE);
			notifGr.addEncodedQuery('sys_scope.scope=x_aaro2_pnl_mgmt');
			notifGr.addQuery('name', dayName[key]);
			notifGr.query();
			if(notifGr.next()){
				notifications[key] = new global.GlobalUtils().getSumulatedNotification(notifGr.getUniqueValue(), deadlineSysId, gs.getUserID(), "", ""); 
			}
		}
		notifications.isLastMonth = isLastQmonth;
		notifications.month = parseInt(month);
		return notifications;
	},


	/* 

		var result = SNC.NotificationSimulator.simulate("df98c612dbf1ec505884eb184b9619fb", "7f51f224db5cb050f41dc15b139619b4", "c02f26a91b7180d094c7caad1e4bcb4d", "", "&sys_target=sysevent_email_action&sys_uniqueValue=df98c612dbf1ec505884eb184b9619fb&sys_row=0&sysparm_encoded_record=");

		var result = SNC.NotificationSimulator.simulate(this.getParameter("sysparm_email_action_id"), this.getParameter("sysparm_record_id"), this.getParameter("sysparm_user_id"), this.getParameter("sysparm_event_id"), this.getParameter("sysparm_changed_fields"));

		*/

	// 	userHasVerifAcc: function(userSysID, deadlineSysID) {
	// 		var hasVerifAcc = false;
	// 		var userGr = new GlideRecord('sys_user');
	// 		if (userGr.get(userSysID)) {
	// 			if (userGr.getValue('title')) {
	// 				var userTitle = userGr.getValue('title');
	// 				var defaultUserTitles = gs.getProperty('x_aaro2_pnl_mgmt.default_early_access_titles');
	// 				if (defaultUserTitles.indexOf(userTitle) != -1) {
	// 					hasVerifAcc = true;
	// 				}
	// 			}
	// 		}

	// 		if(!hasVerifAcc) {
	// 			var statVer = new GlideRecord('x_aaro2_pnl_mgmt_m2m_statements_verificators');
	// 			statVer.addQuery('deadline', deadlineSysID);
	// 			statVer.addQuery('user', userSysID);
	// 			statVer.query();
	// 			if(statVer.hasNext()) {
	// 				hasVerifAcc = true;
	// 			}
	// 		}
	// 		return hasVerifAcc;
	// 	},

	type: 'Utils'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>xxmpurik</sys_created_by>
        <sys_created_on>2021-02-08 14:28:58</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>7878cf80db1a60105884eb184b961965</sys_id>
        <sys_mod_count>156</sys_mod_count>
        <sys_name>Utils</sys_name>
        <sys_package display_value="PALMSnow" source="x_aaro2_pnl_mgmt">58a846e1db14ec50389b84d868961919</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="PALMSnow">58a846e1db14ec50389b84d868961919</sys_scope>
        <sys_update_name>sys_script_include_7878cf80db1a60105884eb184b961965</sys_update_name>
        <sys_updated_by>xxamirony</sys_updated_by>
        <sys_updated_on>2021-06-01 12:38:31</sys_updated_on>
    </sys_script_include>
</record_update>
