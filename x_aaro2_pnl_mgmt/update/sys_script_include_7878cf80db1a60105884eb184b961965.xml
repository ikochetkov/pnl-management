<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_aaro2_pnl_mgmt.Utils</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>Utils</name>
        <script><![CDATA[var Utils = Class.create();
Utils.prototype = {
	initialize: function() {
	},

	getCurrentPeriodDeadline: function(periodType) {
		//var data = {};
		var gdt = new GlideDateTime();
		var curYear = gdt.getYearUTC();
		var curMonth = gdt.getMonthUTC();
		--curMonth;
		var data = this.getDeadline(curYear, String(curMonth), periodType);
		data.currentDateTime = gdt.toString();
		data.beforeDeadline = this.timeValid(gdt, data.end);
		
		return data;
	},

	getDeadline: function(year, month, periodType) {
		var dlGR = new GlideRecord('x_aaro2_pnl_mgmt_deadline');
		dlGR.addQuery('year', year);
		dlGR.addQuery('month', month);
		dlGR.query();
		if(dlGR.next()){
			var period = {};
			period.start = dlGR.getDisplayValue(periodType + '_start');
			period.end = dlGR.getDisplayValue(periodType + '_end');

			return period;
		}else {
			return false;
		}

	},

	getQuestionModalData: function(sysID){
		var questionGr = new GlideRecord('x_aaro2_pnl_mgmt_question');
		questionGr.get(sysID);
		var acc = questionGr.getValue('account');
		var year = questionGr.getValue('year');
		var month = questionGr.getValue('period');
		var deadlineReassignmentPeriod = this.getDeadline(year,month,'reassign');
		var reassignmentTimeValid = this.timeValid(deadlineReassignmentPeriod.start,deadlineReassignmentPeriod.end);

		var deadlineAnswerPeriod = this.getDeadline(year,month,'answer');
		var answerTimeValid = this.timeValid(deadlineAnswerPeriod.start,deadlineAnswerPeriod.end);

		var users = [];
		var accountAssignmentGr = new GlideRecord('x_aaro2_pnl_mgmt_pnl_account_assignment');
		accountAssignmentGr.addQuery('account', acc);
		accountAssignmentGr.query();
		while(accountAssignmentGr.next()){
			users.push({
				id: accountAssignmentGr.getValue('user'),
				label: accountAssignmentGr.getDisplayValue('user')
			});		
		}
		return {
			reassignment_users: users,
			reassignment_start: deadlineReassignmentPeriod.start,
			reassignment_end: deadlineReassignmentPeriod.end,
			reassignment_time_valid: reassignmentTimeValid,
			answer_start: deadlineAnswerPeriod.start,
			answer_end:deadlineReassignmentPeriod.end,
			answer_time_valid:answerTimeValid
		};
	},

	timeValid: function(start, end){
		var startNumeric = new GlideDateTime(start).getNumericValue();
		var endNumeric = new GlideDateTime(end).getNumericValue();
		var currentTime = new GlideDateTime().getNumericValue();
		return startNumeric<currentTime && endNumeric>currentTime;
	},

	type: 'Utils'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>xxmpurik</sys_created_by>
        <sys_created_on>2021-02-08 14:28:58</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>7878cf80db1a60105884eb184b961965</sys_id>
        <sys_mod_count>62</sys_mod_count>
        <sys_name>Utils</sys_name>
        <sys_package display_value="PNL Management" source="x_aaro2_pnl_mgmt">58a846e1db14ec50389b84d868961919</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="PNL Management">58a846e1db14ec50389b84d868961919</sys_scope>
        <sys_update_name>sys_script_include_7878cf80db1a60105884eb184b961965</sys_update_name>
        <sys_updated_by>xxmpurik</sys_updated_by>
        <sys_updated_on>2021-02-11 14:17:58</sys_updated_on>
    </sys_script_include>
</record_update>
