<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_aaro2_pnl_mgmt.AuditHistoryProvider</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>AuditHistoryProvider</name>
        <script><![CDATA[var AuditHistoryProvider = Class.create();
AuditHistoryProvider.prototype = Object.extendsObject(AbstractHistoryProvider, {
  initialize: function (sys_id, tracked_fields) {
    AbstractHistoryProvider.prototype.initialize.call(this, sys_id, tracked_fields)
    this.AUDIT_TABLE = 'sys_audit'
  
  },
  get: function(){
    var auditRecords = []
    var auditGr = new GlideRecord('sys_audit')
    auditGr.addQuery('documentkey', this.RECORD_SYS_ID);
    auditGr.addEncodedQuery('fieldnameIN'+this.TRACKED_FIELDS)
    auditGr.query()
    while (auditGr.next()) {

      auditRecords.push({
        update_time: auditGr.getDisplayValue('sys_created_on'),
        update_time_utc: auditGr.getValue('sys_created_on'),
        user: this._getUserById(auditGr.getValue('user')),
        updates: [
          this._getAuditField(auditGr)
        ],
        type: this.HISTORY_TYPE.FIELD,
        source: 'audit'
      })
    }
    return auditRecords.length ? auditRecords: false;
  },
  _getAuditField: function (auditGr) {
    var fieldName = auditGr.getValue('fieldname')
    
    if (~this.USER_FIELDS.indexOf(fieldName))
      return this._getAuditUserField(auditGr)

    if (~this.BOOLEAN_FIELDS.indexOf(fieldName))
      return this._getAuditBooleanField(auditGr)

    if (fieldName === 'status')
      return this._getStatusField(auditGr)

    return {
      old_value: auditGr.getValue('oldvalue'),
      new_value: auditGr.getValue('newvalue'),
      field: auditGr.getValue('fieldname'),
      label: this.FIELD_LABELS[auditGr.getValue('fieldname')]
    }
  },
  _getAuditUserField: function (auditGr) {
    return {
      old_value: this._getUserBySysId(auditGr.getValue('oldvalue')).name,
      new_value: this._getUserBySysId(auditGr.getValue('newvalue')).name,
      field: auditGr.getValue('fieldname'),
      label: this.FIELD_LABELS[auditGr.getValue('fieldname')],
    }
  },
  _getAuditBooleanField: function (auditGr) {
    return {
      old_value: auditGr.getValue('oldvalue') === '1' ? 'True' : 'False',
      new_value: auditGr.getValue('newvalue') === '1' ? 'True' : 'False',
      field: auditGr.getValue('fieldname'),
      label: this.FIELD_LABELS[auditGr.getValue('fieldname')],
    }
  },
  _getStatusField: function(auditGr){
    return {
      old_value: this.STATUSES[auditGr.getValue('oldvalue')],
      new_value: this.STATUSES[auditGr.getValue('newvalue')],
      field: auditGr.getValue('fieldname'),
      label: this.FIELD_LABELS[auditGr.getValue('fieldname')]
    }
  },
  USER_FIELDS: ['assigned_to', 'requested_by'],
  BOOLEAN_FIELDS: ['is_generic', 'over_1k_reviewed', 'supervisor_reviewed', 'manager_reviewed', 'answer_released'],
  STATUSES: { '1': 'Saved', '2': 'Assigned', '4': 'Answered', '6': 'Unapproved', '0': 'Out of date', 'undefined': 'None' },
  FIELD_LABELS: {
    "account": "Account",
    "accounting_unit": "Accounting Unit",
    "amount": "Amount",
    "answer": "Answer",
    "answer_released": "Answer Released",
    "approval": "Approval",
    "area": "Area",
    "assigned_to": "Assigned To",
    "base_accounting_unit": "Base Accounting Unit",
    "comments": "Comments",
    "company": "Company",
    "description": "Description",
    "division": "Division",
    "group": "Group",
    "invoice": "Invoice",
    "invoice_date": "Invoice Date",
    "invoice_image_url": "Invoice Image URL",
    "is_generic": "Is Generic",
    "journal": "Journal #",
    "journal_company": "Company  (Journal)",
    "journal_number": "Journal #",
    "link_to_reference": "Link to Reference",
    "manager_reviewed": "Manager Reviewed",
    "number": "Number",
    "over_1k": "Over 1K $",
    "over_1k_reviewed": "Over $1K Reviewed",
    "paid_date": "Paid Date",
    "period": "Period",
    "question": "Question",
    "questionid": "QuestionID",
    "reference": "Reference",
    "reference_data": "Reference Data",
    "reference_link_details": "Reference Link Details",
    "region": "Region",
    "requested_by": "Requested By",
    "status": "Status",
    "subunit": "ObjectID",
    "sub_account": "Sub Account",
    "supervisor_reviewed": "Supervisor Reviewed",
    "sys_created_by": "Created by",
    "sys_created_on": "Created",
    "sys_id": "Sys ID",
    "sys_mod_count": "Updates",
    "sys_updated_by": "Updated by",
    "sys_updated_on": "Updated",
    "type": "Type",
    "vendor": "Vendor",
    "vendor_name": "Vendor Name",
    "watched_by": "Watched by",
    "year": "Year"
  },
  type: 'AuditHistoryProvider'
});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>xxamirony</sys_created_by>
        <sys_created_on>2021-06-10 09:22:44</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>73729a1fdbe8bc10f41dc15b139619aa</sys_id>
        <sys_mod_count>6</sys_mod_count>
        <sys_name>AuditHistoryProvider</sys_name>
        <sys_package display_value="PALMSnow" source="x_aaro2_pnl_mgmt">58a846e1db14ec50389b84d868961919</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="PALMSnow">58a846e1db14ec50389b84d868961919</sys_scope>
        <sys_update_name>sys_script_include_73729a1fdbe8bc10f41dc15b139619aa</sys_update_name>
        <sys_updated_by>xxamirony</sys_updated_by>
        <sys_updated_on>2021-06-15 12:48:45</sys_updated_on>
    </sys_script_include>
</record_update>
